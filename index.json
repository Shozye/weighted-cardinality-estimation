{"project": "weighted-cardinality-estimation", "project_url": "#", "show_commit_url": "https://github.com/Shozye/weighted-cardinality-estimation/commit/", "hash_length": 8, "revision_to_hash": {"24": "1a8758e2e8ebd5fcc4c8db5aa08848df778380b9", "25": "6b346671ec327db03976015562f37c033efee566", "26": "9ddab241179c290eea4505e5aa19b611015c6d4e", "27": "e28897be7669e1aaeff8bb1f17f2bc24d2562b8b", "28": "f2f7715d69302dc07e555219c5c19f226fda9f51", "29": "2280c3312b56248a002063f28127f6f39eaaf51d", "30": "4d5d043f9fdfdfd164f372983d68205a90b84975", "31": "227cf97e134de8a8d06942228ca57ca3e6a3866b", "32": "d7703382dee33970b66d5e8a602bc898198b6349", "33": "f4e63747eec63a36413628c97ea52d1ac807f3e1", "34": "cb74a0e313a2946c0b33a0593c11ed414c3c0d5f", "35": "9b399b0b3def9d05e54aa70dabe8abeff92f6529", "36": "a96c8cdbca116edcb3c33d91d16ad07e3505b4aa", "37": "b8aa1f7638ded1d0e27d2ddb5f8c56345f248f3e", "38": "dac8aae5ce0675ef569a10de2e6f081c86af284e", "39": "ab587650f306e2716cf208c8baae4509e0995308", "40": "ad6cc60b7f758b20dc09290581bcd2ee283d5fb6", "41": "31c2127f4af23d38a0fdf06c9022b7b4477abcd0", "42": "ba0c53b319936126707997950a9cb39499b7303c", "43": "687fb9d8b76726aadd7ab177cedecbd1b918f552", "44": "d8eca077eff3745e2050227cd10f5716f740e606", "45": "bb058d02b10054e5703b54ecab22d44c89387303", "46": "cbf5f9df0506bfd8a73e0ac5a58d0e24cc7b6796", "47": "35877a15d75149f4c2c260db33c777898a3a5f09", "48": "bc4fb5c7823764401e9e526b11e6cd49fceea1b6", "49": "ca727e1beeb16cde348d2f30e91648e671d4f10a", "50": "b426b9a5500bf6c76ec0f84983eb0e76c7cf11aa", "51": "1c8062b3b813af940d0cefc76cfad352d734fdf1", "52": "ec314895643a9ee30df3fee475572dc6e531d3c8", "53": "c3b2b37181bc6b2dd452847275069f7d6556862e", "54": "b6dceaa7b575f946beb7fff61e5e93344e5ff1af", "55": "6e4e8f4bab1985c99cf67dee1a20f32beccb703d", "56": "62f119cb8ee4b26fe85793d9c6688584b8bc1cd0", "57": "1cfafe7f655ada17231484080102b359e2629347", "58": "2455dbab3b9006d6b83a700125ffac0b9cb760a0", "59": "8d2bb8407e4d70ac8d1b6ab78b07e60d595d75ac", "60": "18a6307433d742d843f46bbc9a256e30c6f3dc2c", "61": "a8fcbed8646723b57073afeba6e225f503eec301", "62": "bbb2b424248323d40d3d6e8f98d8d074496df0e1", "63": "082e50b44f7101eacddec0507ec6daa076ce7738", "64": "35d53212c5c483c1bbde226595adccadabdb43a1", "65": "a1cf0fe37c658cb8c1297b6c536cf9f699736fa7", "66": "4f6df6e47cf7e23f4ca786ad434336cb831369ff", "67": "3c1e2b8074b40000d74ec2819162e04c0e5d3585", "68": "1882998295fd20181e59b5aa929f23a759a289f9", "69": "67cf6050066afddd08f70acf2fea4645e8cca2f2", "70": "7e2897efcc7d9816f368c52898b2a842fb4c14b4", "71": "c919edf4c8d072a2d4dedf446200696bdfc43579", "72": "7c432415e63d862b7e12120acd641fbc242e9109", "73": "38fab005ad5a94d4e07ed8babc6567f82490298f", "74": "0fa65136dc11b8f5531ecf7c49656caba6d5d93e", "75": "cfe2ee156107dcbbfe8f25ebb90c27670734a63a", "76": "8d1f7e5c9a883b839fae3b78fd1bdf4ec2a021cb", "77": "29865c9f86b7162c769d0b66538b739af05cca9e", "78": "6f5b4c989a8f5ccdc4404dedaf093acb027c6ee3", "79": "4be48ec20b9d5341fd0c731a6f1e8d4252b40cf7", "80": "42d371975c1984bcc70f7e525527586a88a2982b", "81": "3fc8ac28c936da3dd22e89e2b97ff0b08d1831ba"}, "revision_to_date": {"24": 1759316475000, "25": 1759317622000, "26": 1759318623000, "27": 1759318717000, "28": 1759323354000, "29": 1759326289000, "30": 1759328014000, "31": 1759328276000, "32": 1759328351000, "33": 1759329407000, "34": 1759330144000, "35": 1759332167000, "36": 1759332956000, "37": 1759673192000, "38": 1759772684000, "39": 1759767142000, "40": 1759769562000, "41": 1759770102000, "42": 1759770199000, "43": 1759770984000, "44": 1759773391000, "45": 1760171155000, "46": 1760174396000, "47": 1760171955000, "48": 1760172053000, "49": 1760172162000, "50": 1760172321000, "51": 1760174369000, "52": 1760180386000, "53": 1760207615000, "54": 1760207908000, "55": 1760208075000, "56": 1760208618000, "57": 1760248403000, "58": 1760205351000, "59": 1760279898000, "60": 1760285208000, "61": 1760279029000, "62": 1760298406000, "63": 1760456186000, "64": 1760458659000, "65": 1760459223000, "66": 1760465144000, "67": 1760470904000, "68": 1760514172000, "69": 1760536276000, "70": 1760541055000, "71": 1760542501000, "72": 1760542932000, "73": 1760563277000, "74": 1760600410000, "75": 1760604347000, "76": 1760609962000, "77": 1760612424000, "78": 1760615097000, "79": 1760615755000, "80": 1760623760000, "81": 1760624567000}, "params": {"arch": ["x86_64"], "cpu": ["Ryzen 7 5800X"], "machine": ["basePC"], "num_cpu": ["16"], "os": ["Ubuntu 24.04.3 LTS x86_64"], "ram": ["32GB"], "python": ["3.12"], "branch": ["master"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Ryzen 7 5800X", "machine": "basePC", "num_cpu": "16", "os": "Ubuntu 24.04.3 LTS x86_64", "ram": "32GB", "python": "3.12", "branch": "master"}], "benchmarks": {"accuracy.track_CV_of_sketch_size_400": {"code": "class AccuracySuite:\n    def track_coeff_of_variation(self, stats, impl_name):\n        return stats[impl_name]['coeff_of_variation'] * 100\n\n    def setup_cache(self):\n        self.elems = [f\"elem_{i}\" for i in range(AMOUNT_ELEMENTS_TO_ADD)]\n        self.weights = [1.0] * AMOUNT_ELEMENTS_TO_ADD\n        self.true_cardinality = sum(self.weights)\n        stats = {\n            impl_name: self._calculate_all_statistics(impl_name)\n            for impl_name in IMPLS.keys()\n        }\n        return stats", "name": "accuracy.track_CV_of_sketch_size_400", "param_names": ["implementation"], "params": [["'ExpSketch'", "'FastExpSketch'", "'FastGMExpSketch'", "'BaseQSketch(b=8)'", "'FastQSketch(b=8)'", "'QSketchDyn(b=8)'", "'QSketch(b=8)'", "'BaseLogExpSketch(b=8, k=2)'", "'FastLogExpSketch(b=8, k=2)'", "'BaseShiftedLogExpSketch(b=8, k=2)'", "'FastShiftedLogExpSketch(b=8, k=2)'"]], "pretty_name": "Coefficient of variation for sketch_size=400", "setup_cache_key": "asv_accuracy:18", "timeout": 900, "type": "track", "unit": "%", "version": "aaba6fa1d666ea4f31b3c5f62c7428e36d9b5f30f1962b8028dad14cef70c9bc"}, "accuracy.track_mean_of_10000_estimates_sketch_size_400": {"code": "class AccuracySuite:\n    def track_mean_estimate(self, stats, impl_name):\n        return stats[impl_name]['mean']\n\n    def setup_cache(self):\n        self.elems = [f\"elem_{i}\" for i in range(AMOUNT_ELEMENTS_TO_ADD)]\n        self.weights = [1.0] * AMOUNT_ELEMENTS_TO_ADD\n        self.true_cardinality = sum(self.weights)\n        stats = {\n            impl_name: self._calculate_all_statistics(impl_name)\n            for impl_name in IMPLS.keys()\n        }\n        return stats", "name": "accuracy.track_mean_of_10000_estimates_sketch_size_400", "param_names": ["implementation"], "params": [["'ExpSketch'", "'FastExpSketch'", "'FastGMExpSketch'", "'BaseQSketch(b=8)'", "'FastQSketch(b=8)'", "'QSketchDyn(b=8)'", "'QSketch(b=8)'", "'BaseLogExpSketch(b=8, k=2)'", "'FastLogExpSketch(b=8, k=2)'", "'BaseShiftedLogExpSketch(b=8, k=2)'", "'FastShiftedLogExpSketch(b=8, k=2)'"]], "pretty_name": "Mean of estimates 10000 sketches with size=400", "setup_cache_key": "asv_accuracy:18", "timeout": 900, "type": "track", "unit": "units", "version": "35e42c91a0ddd1e63ecd9737020a4b563f6ab9bb2af321ae2f147b129e4d829d"}, "accuracy.track_mean_relative_error_sketch_size_400": {"code": "class AccuracySuite:\n    def track_relative_error(self, stats, impl_name):\n        return stats[impl_name]['mean_relative_error'] * 100\n\n    def setup_cache(self):\n        self.elems = [f\"elem_{i}\" for i in range(AMOUNT_ELEMENTS_TO_ADD)]\n        self.weights = [1.0] * AMOUNT_ELEMENTS_TO_ADD\n        self.true_cardinality = sum(self.weights)\n        stats = {\n            impl_name: self._calculate_all_statistics(impl_name)\n            for impl_name in IMPLS.keys()\n        }\n        return stats", "name": "accuracy.track_mean_relative_error_sketch_size_400", "param_names": ["implementation"], "params": [["'ExpSketch'", "'FastExpSketch'", "'FastGMExpSketch'", "'BaseQSketch(b=8)'", "'FastQSketch(b=8)'", "'QSketchDyn(b=8)'", "'QSketch(b=8)'", "'BaseLogExpSketch(b=8, k=2)'", "'FastLogExpSketch(b=8, k=2)'", "'BaseShiftedLogExpSketch(b=8, k=2)'", "'FastShiftedLogExpSketch(b=8, k=2)'"]], "pretty_name": "Mean relative error for sketch_size=400", "setup_cache_key": "asv_accuracy:18", "timeout": 900, "type": "track", "unit": "%", "version": "ddeae679df66c278bca2d8e815c0b878a42ce508de10b26d88001c8997ebd16f"}, "memory.track_memory_estimate_sketch_size_1000": {"code": "class MemorySuite:\n    def track_estimate_memory(self, impl_name):\n        return self.instance.memory_usage_estimate()\n\n    def setup(self, impl_name: str):\n        self.instance = IMPLS[impl_name](SKETCH_SIZE, get_seeds(SKETCH_SIZE))\n        self.instance.add(\"this is a single element.\", 1.0)", "name": "memory.track_memory_estimate_sketch_size_1000", "param_names": ["sketch type"], "params": [["'ExpSketch'", "'FastExpSketch'", "'FastGMExpSketch'", "'BaseQSketch(b=8)'", "'FastQSketch(b=8)'", "'QSketchDyn(b=8)'", "'QSketch(b=8)'", "'BaseLogExpSketch(b=8, k=2)'", "'FastLogExpSketch(b=8, k=2)'", "'BaseShiftedLogExpSketch(b=8, k=2)'", "'FastShiftedLogExpSketch(b=8, k=2)'"]], "pretty_name": "memory used for estimation in sketch of size 1000", "type": "track", "unit": "bytes", "version": "1f79bf6cc2670a28d98681b481deda947372355d0fc0277e4d91877d93c82159"}, "memory.track_memory_serialization_sketch_size_1000": {"code": "class MemorySuite:\n    def track_serialization_size(self, impl_name):\n        serialized_object = pickle.dumps(self.instance)\n        return len(serialized_object)\n\n    def setup(self, impl_name: str):\n        self.instance = IMPLS[impl_name](SKETCH_SIZE, get_seeds(SKETCH_SIZE))\n        self.instance.add(\"this is a single element.\", 1.0)", "name": "memory.track_memory_serialization_sketch_size_1000", "param_names": ["sketch type"], "params": [["'ExpSketch'", "'FastExpSketch'", "'FastGMExpSketch'", "'BaseQSketch(b=8)'", "'FastQSketch(b=8)'", "'QSketchDyn(b=8)'", "'QSketch(b=8)'", "'BaseLogExpSketch(b=8, k=2)'", "'FastLogExpSketch(b=8, k=2)'", "'BaseShiftedLogExpSketch(b=8, k=2)'", "'FastShiftedLogExpSketch(b=8, k=2)'"]], "pretty_name": "Serialization size of sketch with size 1000", "type": "track", "unit": "bytes", "version": "7e52cc15f72c70896e738ef6dd6ef0632bc2f258626db5f5315a87620172290b"}, "memory.track_memory_total_sketch_size_1000": {"code": "class MemorySuite:\n    def track_total_memory(self, impl_name):\n        return self.instance.memory_usage_total()\n\n    def setup(self, impl_name: str):\n        self.instance = IMPLS[impl_name](SKETCH_SIZE, get_seeds(SKETCH_SIZE))\n        self.instance.add(\"this is a single element.\", 1.0)", "name": "memory.track_memory_total_sketch_size_1000", "param_names": ["sketch type"], "params": [["'ExpSketch'", "'FastExpSketch'", "'FastGMExpSketch'", "'BaseQSketch(b=8)'", "'FastQSketch(b=8)'", "'QSketchDyn(b=8)'", "'QSketch(b=8)'", "'BaseLogExpSketch(b=8, k=2)'", "'FastLogExpSketch(b=8, k=2)'", "'BaseShiftedLogExpSketch(b=8, k=2)'", "'FastShiftedLogExpSketch(b=8, k=2)'"]], "pretty_name": "Total memory used of sketch of size 1000", "type": "track", "unit": "bytes", "version": "dce9940256cd752754d3400c4e248cf8f6e9f75c41c18893a5ab0791123dbd4e"}, "memory.track_memory_write_sketch_size_1000": {"code": "class MemorySuite:\n    def track_write_memory(self, impl_name):\n        return self.instance.memory_usage_write()\n\n    def setup(self, impl_name: str):\n        self.instance = IMPLS[impl_name](SKETCH_SIZE, get_seeds(SKETCH_SIZE))\n        self.instance.add(\"this is a single element.\", 1.0)", "name": "memory.track_memory_write_sketch_size_1000", "param_names": ["sketch type"], "params": [["'ExpSketch'", "'FastExpSketch'", "'FastGMExpSketch'", "'BaseQSketch(b=8)'", "'FastQSketch(b=8)'", "'QSketchDyn(b=8)'", "'QSketch(b=8)'", "'BaseLogExpSketch(b=8, k=2)'", "'FastLogExpSketch(b=8, k=2)'", "'BaseShiftedLogExpSketch(b=8, k=2)'", "'FastShiftedLogExpSketch(b=8, k=2)'"]], "pretty_name": "Write-able memory used for sketch of size 1000", "type": "track", "unit": "bytes", "version": "ac569cef8103604596f5ca11196f241c24c29ef11cac88af54456d3d193fb3bf"}, "regression.track_estimate": {"code": "class RegressionSuite:\n    def track_estimate(self, impl_name):\n        # This is done to see if estimate changed,\n        # I want to see if my changes did any change to the estimation at all.\n        return self.instance.estimate()\n\n    def setup(self, impl_name: str):\n        seeds = list(range(1,SKETCH_SIZE+1))\n        self.instance = IMPLS[impl_name](SKETCH_SIZE, seeds)\n        self.instance.add(\"this is a single element.\", 1.0)", "name": "regression.track_estimate", "param_names": ["sketch type"], "params": [["'ExpSketch'", "'FastExpSketch'", "'FastGMExpSketch'", "'BaseQSketch(b=8)'", "'FastQSketch(b=8)'", "'QSketchDyn(b=8)'", "'QSketch(b=8)'", "'BaseLogExpSketch(b=8, k=2)'", "'FastLogExpSketch(b=8, k=2)'", "'BaseShiftedLogExpSketch(b=8, k=2)'", "'FastShiftedLogExpSketch(b=8, k=2)'"]], "pretty_name": "Sketch value after adding constant element.", "type": "track", "unit": "units", "version": "1f9d21521ec61431a361c22e3c6c46c508bada3a730b65df3a821e71e28e142d"}, "time.time_add_10000_elems_to_sketch_size_1000": {"code": "class AddManySuite:\n    def time_add_many(self, impl_name):\n        self.instance.add_many(self.elems, self.weights)\n\n    def setup(self, impl_name: str):\n        self.instance = IMPLS[impl_name](SKETCH_SIZE, get_seeds(SKETCH_SIZE))\n        self.elems = [f\"elem_{i}\" for i in range(AMOUNT_ELEMENTS_TO_ADD)]\n        self.weights = [1.0] * AMOUNT_ELEMENTS_TO_ADD", "min_run_count": 2, "name": "time.time_add_10000_elems_to_sketch_size_1000", "number": 0, "param_names": ["sketch type"], "params": [["'ExpSketch'", "'FastExpSketch'", "'FastGMExpSketch'", "'BaseQSketch(b=8)'", "'FastQSketch(b=8)'", "'QSketchDyn(b=8)'", "'QSketch(b=8)'", "'BaseLogExpSketch(b=8, k=2)'", "'FastLogExpSketch(b=8, k=2)'", "'BaseShiftedLogExpSketch(b=8, k=2)'", "'FastShiftedLogExpSketch(b=8, k=2)'"]], "pretty_name": "Time to add 10000 to sketch size 1000", "repeat": 5, "rounds": 3, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "742e0afb5a7a0a1ad3975b0b173132bf9280cb20be8f0ff93e6199944648a33f", "warmup_time": -1}, "time.time_estimate_sketch_size_1000": {"code": "class EstimateSuite:\n    def time_estimate(self, impl_name):\n        self.instance.estimate()\n\n    def setup(self, impl_name: str):\n        self.instance = IMPLS[impl_name](SKETCH_SIZE, get_seeds(SKETCH_SIZE))\n        self.instance.add(\"this is a single element.\", 1.0)", "min_run_count": 2, "name": "time.time_estimate_sketch_size_1000", "number": 0, "param_names": ["sketch type"], "params": [["'ExpSketch'", "'FastExpSketch'", "'FastGMExpSketch'", "'BaseQSketch(b=8)'", "'FastQSketch(b=8)'", "'QSketchDyn(b=8)'", "'QSketch(b=8)'", "'BaseLogExpSketch(b=8, k=2)'", "'FastLogExpSketch(b=8, k=2)'", "'BaseShiftedLogExpSketch(b=8, k=2)'", "'FastShiftedLogExpSketch(b=8, k=2)'"]], "pretty_name": "Time to estimate sketch size 1000", "repeat": 10, "rounds": 5, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "9656711d31394bdd3a472d3a5508c93f807af2be811c21b2819c0f21b0e4ad5b", "warmup_time": -1}}, "machines": {"basePC": {"arch": "x86_64", "cpu": "Ryzen 7 5800X", "machine": "basePC", "num_cpu": "16", "os": "Ubuntu 24.04.3 LTS x86_64", "ram": "32GB", "version": 1}}, "tags": {}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}