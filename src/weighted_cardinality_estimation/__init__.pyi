# src/weighted_cardinality_estimation/__init__.pyi

class ExpSketch:
    def __init__(self, m: int, seeds: list[int]) -> None: ...
    def add(self, x: str, weight: float = ...) -> None: ...
    def add_many(self, elems: list[str], weights: list[float]) -> None: ...
    def estimate(self) -> float: ...
    def jaccard_struct(self, other: "ExpSketch") -> float: ...
    def memory_usage_total(self) -> int: ...
    def memory_usage_write(self) -> int: ...
    def memory_usage_estimate(self) -> int: ...

class FastExpSketch:
    def __init__(self, m: int, seeds: list[int]) -> None: ...
    def add(self, x: str, weight: float = ...) -> None: ...
    def add_many(self, elems: list[str], weights: list[float]) -> None: ...
    def estimate(self) -> float: ...
    def jaccard_struct(self, other: "FastExpSketch") -> float: ...
    def memory_usage_total(self) -> int: ...
    def memory_usage_write(self) -> int: ...
    def memory_usage_estimate(self) -> int: ...

class FastGMExpSketch:
    def __init__(self, m: int, seeds: list[int]) -> None: ...
    def add(self, x: str, weight: float = ...) -> None: ...
    def add_many(self, elems: list[str], weights: list[float]) -> None: ...
    def estimate(self) -> float: ...
    def jaccard_struct(self, other: "FastExpSketch") -> float: ...
    def memory_usage_total(self) -> int: ...
    def memory_usage_write(self) -> int: ...
    def memory_usage_estimate(self) -> int: ...

class BaseQSketch:
    def __init__(self, m: int, seeds: list[int], amount_bits: int) -> None: ...
    def add(self, x: str, weight: float = ...) -> None: ...
    def add_many(self, elems: list[str], weights: list[float]) -> None: ...    
    def estimate(self) -> float: ...
    def memory_usage_total(self) -> int: ...
    def memory_usage_write(self) -> int: ...
    def memory_usage_estimate(self) -> int: ...

class FastQSketch:
    def __init__(self, m: int, seeds: list[int], amount_bits: int) -> None: ...
    def add(self, x: str, weight: float = ...) -> None: ...
    def add_many(self, elems: list[str], weights: list[float]) -> None: ...    
    def estimate(self) -> float: ...
    def memory_usage_total(self) -> int: ...
    def memory_usage_write(self) -> int: ...
    def memory_usage_estimate(self) -> int: ...

class QSketchDyn:
    def __init__(self, m: int, seeds: list[int], amount_bits: int, g_seed: int = ...) -> None: ...
    def add(self, elem: str, weight: float = ...) -> None: ...
    def add_many(self, elems: list[str], weights: list[float]) -> None: ...
    def estimate(self) -> float: ...
    def memory_usage_total(self) -> int: ...
    def memory_usage_write(self) -> int: ...
    def memory_usage_estimate(self) -> int: ...

class QSketch:
    def __init__(self, m: int, seeds: list[int], amount_bits: int) -> None: ...
    def add(self, x: str, weight: float = ...) -> None: ...
    def add_many(self, elems: list[str], weights: list[float]) -> None: ...    
    def estimate(self) -> float: ...
    def memory_usage_total(self) -> int: ...
    def memory_usage_write(self) -> int: ...
    def memory_usage_estimate(self) -> int: ...

class FastLogExpSketch:
    def __init__(self, m: int, seeds: list[int], amount_bits: int, logarithm_base: float) -> None: ...
    def add(self, x: str, weight: float = ...) -> None: ...
    def add_many(self, elems: list[str], weights: list[float]) -> None: ...    
    def estimate(self) -> float: ...
    def memory_usage_total(self) -> int: ...
    def memory_usage_write(self) -> int: ...
    def memory_usage_estimate(self) -> int: ...
